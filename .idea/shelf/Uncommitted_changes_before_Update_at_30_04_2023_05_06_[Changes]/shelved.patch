Index: app/src/main/java/com/example/goingmerry/navigate/StartScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.goingmerry.navigate\r\n\r\nimport AccountQuery\r\nimport android.os.Build\r\nimport android.util.Log\r\nimport androidx.annotation.RequiresApi\r\nimport androidx.compose.runtime.*\r\nimport androidx.compose.runtime.saveable.rememberSaveable\r\nimport androidx.navigation.compose.NavHost\r\nimport androidx.navigation.compose.composable\r\n\r\n\r\nimport androidx.navigation.compose.rememberNavController\r\nimport com.example.goingmerry.DataStore\r\nimport com.example.goingmerry.ui.ChatBox\r\nimport com.example.goingmerry.ui.ChatBoxGroup\r\nimport com.example.goingmerry.ui.home.BodyScreen\r\nimport com.example.goingmerry.ui.home.ListFriends\r\nimport com.example.goingmerry.ui.home.ScreenHome\r\nimport com.example.goingmerry.ui.signInSignUp.ScreenSignIn\r\nimport com.example.goingmerry.ui.signInSignUp.ScreenSignUp\r\nimport com.example.goingmerry.ui.signInSignUp.WelcomeScreen\r\nimport com.example.goingmerry.ui.home.SettingScreen\r\nimport com.example.goingmerry.ui.setting.ListRequestAddFriends\r\nimport com.example.goingmerry.ui.setting.ProfileScreen\r\nimport com.example.goingmerry.ui.setting.UserInfoScreen\r\nimport com.example.goingmerry.ui.setting.GroupManager\r\nimport com.example.goingmerry.ui.signInSignUp.*\r\nimport com.example.goingmerry.viewModel.*\r\nimport type.UserRole\r\n\r\n\r\n@RequiresApi(Build.VERSION_CODES.O)\r\n@Composable\r\nfun ScreenStart(loginViewModel: LoginViewModel, signUpViewModel: SignUpViewModel, homeViewModel: HomeViewModel,\r\n                chatBoxViewModel: ChatBoxViewModel, profileViewModel: ProfileViewModel,\r\n                listRAFViewModel: ListRAFViewModel, groupManagerViewModel: GroupManagerViewModel,\r\n                fillInfoViewModel: FillInfoViewModel, startScreenViewModel: StartScreenViewModel, data: DataStore\r\n){\r\n    val navController = rememberNavController()\r\n    NavHost(navController = navController, startDestination = Routes.Welcome.route){\r\n        composable(Routes.ChatBox.route + \"/{idConversation}\"){navBackTrackEntry->\r\n            val idMember = navBackTrackEntry.arguments?.getString(\"idConversation\")\r\n            idMember?.let {\r\n                ChatBox(homeViewModel.conversations.value[it.toInt()], chatBoxViewModel, homeViewModel.idAccount.value,\r\n                loginViewModel.token.value)\r\n            }\r\n        }\r\n\r\n        composable(Routes.GroupMember.route + \"/{idConversation}\"){navBackTrackEntry->\r\n            val idConversation = navBackTrackEntry.arguments?.getString(\"idConversation\")\r\n            idConversation?.let {\r\n                for(conversation in homeViewModel.conversations.value){\r\n                    if(idConversation == conversation.id){\r\n                        ListMembers(members = conversation.members)\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        composable(Routes.ChatBoxGroup.route + \"/{idConversation}\"){navBackTrackEntry->\r\n            val idMember = navBackTrackEntry.arguments?.getString(\"idConversation\")\r\n            idMember?.let {\r\n                Log.e(\"it\", \"${it.toInt()}\")\r\n                ChatBoxGroup(homeViewModel.conversations.value[it.toInt()], chatBoxViewModel, homeViewModel.idAccount.value,\r\n                navController, loginViewModel.token.value)\r\n            }\r\n\r\n        }\r\n\r\n        composable(Routes.Setting.route){\r\n            SettingScreen(navController, homeViewModel.nameAccount.value, homeViewModel.avatarAccount.value,\r\n            homeViewModel.idAccount.value, data, chatBoxViewModel)\r\n        }\r\n\r\n        composable(Routes.UserInfo.route){\r\n            UserInfoScreen()\r\n        }\r\n\r\n        composable(Routes.Profile.route + \"/{idUser}\"){navBackTrackEntry->\r\n            val idUser = navBackTrackEntry.arguments?.getString(\"idUser\")\r\n            idUser?.let {\r\n                var isFriend: Boolean = false;\r\n                if(homeViewModel.conversations.value.isNotEmpty()){\r\n                    for(conversation in homeViewModel.conversations.value){\r\n                        if(conversation.members.size == 2){\r\n                            if(conversation.members[0].id == idUser){\r\n                                isFriend = true;\r\n                                break;\r\n                            }\r\n                            if(conversation.members[1].id == idUser){\r\n                                isFriend = true;\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                ProfileScreen(idUser.orEmpty(), loginViewModel.token.value, profileViewModel, isFriend)\r\n            }\r\n        }\r\n\r\n        composable(Routes.FillInfo.route){\r\n            FillScreen(navController = navController, fillInfoViewModel, loginViewModel.token.value)\r\n        }\r\n\r\n        composable(Routes.ForgotPassword.route){\r\n            ForgotPasswordScreen(navController = navController)\r\n        }\r\n\r\n        composable(Routes.Verification.route){\r\n            VerificationScreen(navController = navController, titlee = \"\")\r\n        }\r\n\r\n        composable(Routes.Welcome.route){\r\n            WelcomeScreen(navController = navController,\r\n                signupViewModel = signUpViewModel, loginViewModel = loginViewModel,\r\n                startScreenViewModel = startScreenViewModel, dataStore = data)\r\n        }\r\n\r\n        composable(Routes.SignIn.route){\r\n            chatBoxViewModel.stateSockets.value = \"OFF\"\r\n            if(loginViewModel.isSuccessLogin.value == 2){\r\n                LaunchedEffect(key1 = Unit){\r\n                    navController.navigate(route = Routes.Home.route){\r\n                        popUpTo(route = Routes.SignIn.route) {\r\n                            inclusive = true\r\n                        }\r\n                    }\r\n                }\r\n            }else if(loginViewModel.isSuccessLogin.value == 3){\r\n                LaunchedEffect(key1 = Unit){\r\n                    navController.navigate(route = Routes.FillInfo.route){\r\n                        popUpTo(route = Routes.SignIn.route){\r\n                            inclusive = true\r\n                        }\r\n                    }\r\n                }\r\n            }else{\r\n                ScreenSignIn(navController = navController, loginViewModel = loginViewModel, data = data)\r\n            }\r\n        }\r\n\r\n        composable(Routes.Home.route){\r\n            chatBoxViewModel.resetListReceiverMessage()\r\n            ScreenHome(loginViewModel, chatBoxViewModel = chatBoxViewModel, homeViewModel = homeViewModel, navController)\r\n        }\r\n\r\n        composable(Routes.SignUp.route){\r\n            if(signUpViewModel.isSuccessSignUp.value == 2) {\r\n                LaunchedEffect(key1 = Unit) {\r\n                    navController.navigate(route = Routes.Welcome.route) {\r\n                        popUpTo(route = Routes.SignIn.route) {\r\n                            inclusive = true;\r\n                        }\r\n                    }\r\n                }\r\n            }else{\r\n                ScreenSignUp(navController = navController, signUpViewModel = signUpViewModel)\r\n            }\r\n        }\r\n        composable(Routes.ListRequestAddFriend.route){\r\n            val listRequestAddFriend = homeViewModel.listRequestAddFriend.collectAsState()\r\n            ListRequestAddFriends(token = loginViewModel.token.value, listFriendRequest = listRequestAddFriend.value, listRAFViewModel = listRAFViewModel)\r\n        }\r\n\r\n        composable(Routes.GroupManager.route){\r\n            GroupManager(groupManagerViewModel, loginViewModel.token.value)\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/goingmerry/navigate/StartScreen.kt b/app/src/main/java/com/example/goingmerry/navigate/StartScreen.kt
--- a/app/src/main/java/com/example/goingmerry/navigate/StartScreen.kt	(revision b7d289ff62761a45d5c05f82806f142185413c15)
+++ b/app/src/main/java/com/example/goingmerry/navigate/StartScreen.kt	(date 1682699133751)
@@ -165,7 +165,7 @@
         }
 
         composable(Routes.GroupManager.route){
-            GroupManager(groupManagerViewModel, loginViewModel.token.value)
+            GroupManager(groupManagerViewModel, loginViewModel.token.value, nav = navController)
         }
     }
 }
\ No newline at end of file
Index: app/src/main/java/com/example/goingmerry/ui/signInSignUp/FillInfo.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.goingmerry.ui.signInSignUp\r\n\r\nimport android.util.Log\r\nimport androidx.compose.foundation.background\r\nimport androidx.compose.foundation.clickable\r\nimport androidx.compose.foundation.layout.*\r\nimport androidx.compose.foundation.lazy.LazyColumn\r\nimport androidx.compose.foundation.shape.RoundedCornerShape\r\nimport androidx.compose.foundation.text.KeyboardOptions\r\nimport androidx.compose.material.*\r\nimport androidx.compose.material.icons.Icons\r\nimport androidx.compose.material.icons.filled.ArrowDropDown\r\nimport androidx.compose.runtime.*\r\nimport androidx.compose.runtime.saveable.rememberSaveable\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.draw.clip\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.text.font.FontWeight\r\nimport androidx.compose.ui.text.input.KeyboardType\r\nimport androidx.compose.ui.text.style.TextAlign\r\nimport androidx.compose.ui.tooling.preview.Preview\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.compose.ui.unit.sp\r\nimport androidx.navigation.NavController\r\nimport androidx.navigation.compose.rememberNavController\r\nimport com.apollographql.apollo.api.Input\r\nimport com.example.goingmerry.navigate.Routes\r\nimport com.example.goingmerry.viewModel.FillInfoViewModel\r\nimport type.AccountInput\r\nimport type.Gender\r\n\r\n@Composable\r\nfun FillScreen(navController: NavController, fillInfoViewModel: FillInfoViewModel, token: String) {\r\n    Column(\r\n        horizontalAlignment = Alignment.CenterHorizontally, modifier = Modifier.fillMaxSize()\r\n    ) {\r\n        LogoApp()\r\n\r\n        Spacer(modifier = Modifier.height(15.dp))\r\n\r\n        Text(\r\n            text = \"Điền thông tin để hoàn thành hồ sơ của bạn\",\r\n            fontSize = 25.sp,\r\n            color = Color.Black,\r\n            fontWeight = FontWeight.Bold,\r\n            textAlign = TextAlign.Center,\r\n            modifier = Modifier.width(320.dp)\r\n        )\r\n\r\n        Spacer(modifier = Modifier.height(15.dp))\r\n\r\n        BodyFill(navController = navController, fillInfoViewModel, token)\r\n    }\r\n}\r\n\r\n@Composable\r\n@Preview\r\nfun PreviewFill() {\r\n    val navController = rememberNavController()\r\n    //FillScreen(navController = navController)\r\n}\r\n\r\n@Composable\r\nfun BodyFill(navController: NavController, fillInfoViewModel: FillInfoViewModel, token: String) {\r\n    var nameAccount by rememberSaveable { mutableStateOf(\"\") }\r\n    var birthDate by rememberSaveable { mutableStateOf(\"\") }\r\n    var address by rememberSaveable { mutableStateOf(\"An Giang\") }\r\n    val selectedGender = remember { mutableStateOf(\"\") }\r\n    var job by rememberSaveable { mutableStateOf(\"\") }\r\n    var hobby by rememberSaveable { mutableStateOf(\"\") }\r\n    if(fillInfoViewModel.idAccountUpdate.value != \"\"){\r\n        navController.navigate(Routes.Home.route){\r\n            launchSingleTop = true\r\n        }\r\n        fillInfoViewModel.idAccountUpdate.value = \"\"\r\n    }\r\n    LazyColumn(\r\n        modifier = Modifier\r\n            .fillMaxWidth()\r\n            .padding(horizontal = 25.dp),\r\n        horizontalAlignment = Alignment.CenterHorizontally,\r\n    ) {\r\n        item {\r\n            Text(\r\n                text = \"Tên tài khoản\",\r\n                fontSize = 15.sp,\r\n                color = Color.Black,\r\n                fontWeight = FontWeight.Bold,\r\n                textAlign = TextAlign.Left,\r\n                modifier = Modifier.width(295.dp)\r\n            )\r\n\r\n            Spacer(modifier = Modifier.height(5.dp))\r\n\r\n            TextField(\r\n                value = nameAccount,\r\n                onValueChange = { nameAccount = it },\r\n                singleLine = true,\r\n                modifier = Modifier\r\n                    .padding(bottom = 15.dp)\r\n                    .height(60.dp)\r\n                    .width(295.dp)\r\n                    .clip(RoundedCornerShape(10.dp))\r\n                    .background(MaterialTheme.colors.secondaryVariant),\r\n            )\r\n\r\n            Text(\r\n                text = \"Sinh nhật\",\r\n                fontSize = 15.sp,\r\n                color = Color.Black,\r\n                fontWeight = FontWeight.Bold,\r\n                textAlign = TextAlign.Left,\r\n                modifier = Modifier.width(295.dp)\r\n            )\r\n\r\n            Spacer(modifier = Modifier.height(5.dp))\r\n\r\n            TextField(\r\n                value = birthDate,\r\n                onValueChange = { birthDate = it },\r\n                keyboardOptions = KeyboardOptions(\r\n                    keyboardType = KeyboardType.Number\r\n                ),\r\n                singleLine = true,\r\n                placeholder = { Text(\"yyyy-MM-dd\") },\r\n                modifier = Modifier\r\n                    .padding(bottom = 15.dp)\r\n                    .height(60.dp)\r\n                    .width(295.dp)\r\n                    .clip(RoundedCornerShape(10.dp))\r\n                    .background(MaterialTheme.colors.secondaryVariant),\r\n            )\r\n\r\n            Text(\r\n                text = \"Giới tính\",\r\n                fontSize = 15.sp,\r\n                color = Color.Black,\r\n                fontWeight = FontWeight.Bold,\r\n                textAlign = TextAlign.Left,\r\n                modifier = Modifier.width(295.dp)\r\n            )\r\n\r\n            Spacer(modifier = Modifier.height(5.dp))\r\n\r\n            GenderSelection(selectedGender = selectedGender)\r\n\r\n            Text(\r\n                text = \"Nơi ở\",\r\n                fontSize = 15.sp,\r\n                color = Color.Black,\r\n                fontWeight = FontWeight.Bold,\r\n                textAlign = TextAlign.Left,\r\n                modifier = Modifier.width(295.dp)\r\n            )\r\n\r\n            Spacer(modifier = Modifier.height(5.dp))\r\n\r\n            DropBoxFill(changeAddress = {selectedProvince: String -> address = selectedProvince})\r\n\r\n            Spacer(modifier = Modifier.height(15.dp))\r\n\r\n            Text(\r\n                text = \"Công việc\",\r\n                fontSize = 15.sp,\r\n                color = Color.Black,\r\n                fontWeight = FontWeight.Bold,\r\n                textAlign = TextAlign.Left,\r\n                modifier = Modifier.width(295.dp)\r\n            )\r\n\r\n            Spacer(modifier = Modifier.height(5.dp))\r\n\r\n            TextField(\r\n                value = job,\r\n                onValueChange = { job = it },\r\n                singleLine = true,\r\n                modifier = Modifier\r\n                    .padding(bottom = 15.dp)\r\n                    .height(60.dp)\r\n                    .width(295.dp)\r\n                    .clip(RoundedCornerShape(10.dp))\r\n                    .background(MaterialTheme.colors.secondaryVariant),\r\n            )\r\n\r\n            Text(\r\n                text = \"Sở thích\",\r\n                fontSize = 15.sp,\r\n                color = Color.Black,\r\n                fontWeight = FontWeight.Bold,\r\n                textAlign = TextAlign.Left,\r\n                modifier = Modifier.width(295.dp)\r\n            )\r\n\r\n            Spacer(modifier = Modifier.height(5.dp))\r\n\r\n            TextField(\r\n                value = hobby,\r\n                onValueChange = { hobby = it },\r\n                modifier = Modifier\r\n                    .padding(bottom = 15.dp)\r\n                    .height(60.dp)\r\n                    .width(295.dp)\r\n                    .clip(RoundedCornerShape(10.dp))\r\n                    .background(MaterialTheme.colors.secondaryVariant),\r\n                shape = RoundedCornerShape(10.dp)\r\n            )\r\n\r\n            Spacer(modifier = Modifier.height(15.dp))\r\n\r\n            Button(\r\n                onClick = {\r\n                    Log.e(\"information\", \"$nameAccount $birthDate $address ${selectedGender.value} $job $hobby\")\r\n                    var render = Gender.MALE\r\n                    if(selectedGender.value == \"Nữ\"){\r\n                        render = Gender.FEMALE\r\n                    }\r\n                    if(selectedGender.value == \"Khác\"){\r\n                        render = Gender.OTHER\r\n                    }\r\n                    val input = AccountInput(Input.fromNullable(nameAccount), Input.fromNullable(birthDate), Input.fromNullable(address),\r\n                                    Input.fromNullable(render), Input.fromNullable(job), Input.fromNullable(hobby))\r\n                    fillInfoViewModel.updateAccount(token, input)\r\n                },\r\n                colors = ButtonDefaults.buttonColors(backgroundColor = MaterialTheme.colors.primary),\r\n                shape = RoundedCornerShape(10.dp),\r\n                modifier = Modifier\r\n                    .height(60.dp)\r\n                    .width(120.dp)\r\n                    .padding(bottom = 10.dp)\r\n\r\n            ) {\r\n                Text(text = \"Hoàn thành\")\r\n            }\r\n\r\n            Spacer(modifier = Modifier.height(20.dp))\r\n        }\r\n    }\r\n\r\n}\r\n\r\n@Composable\r\nfun GenderSelection(selectedGender: MutableState<String>) {\r\n    Column(\r\n        horizontalAlignment = Alignment.CenterHorizontally,\r\n\r\n        ) {\r\n        Row(\r\n            modifier = Modifier\r\n                .width(295.dp)\r\n                .height(60.dp),\r\n            horizontalArrangement = Arrangement.SpaceBetween\r\n        ) {\r\n            Row() {\r\n                RadioButton(\r\n                    selected = selectedGender.value == \"Nam\",\r\n                    onClick = { selectedGender.value = \"Nam\" },\r\n                )\r\n                Text(text = \"Nam\", modifier = Modifier.padding(start = 8.dp))\r\n            }\r\n\r\n            Row() {\r\n                RadioButton(\r\n                    selected = selectedGender.value == \"Nữ\",\r\n                    onClick = { selectedGender.value = \"Nữ\" },\r\n                )\r\n                Text(text = \"Nữ\", modifier = Modifier.padding(start = 8.dp))\r\n            }\r\n\r\n            Row() {\r\n                RadioButton(\r\n                    selected = selectedGender.value == \"Khác\",\r\n                    onClick = { selectedGender.value = \"Khác\" },\r\n                )\r\n                Text(text = \"Khác\", modifier = Modifier.padding(start = 8.dp))\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nfun DropBoxFill(changeAddress: (String) -> Unit) {\r\n    Column {\r\n        val provinceList = listOf(\r\n            \"An Giang\",\r\n            \"Bà Rịa-Vũng Tàu\",\r\n            \"Bắc Giang\",\r\n            \"Bắc Kạn\",\r\n            \"Bạc Liêu\",\r\n            \"Bắc Ninh\",\r\n            \"Bến Tre\",\r\n            \"Bình Định\",\r\n            \"Bình Dương\",\r\n            \"Bình Phước\",\r\n            \"Bình Thuận\",\r\n            \"Cà Mau\",\r\n            \"Cần Thơ\",\r\n            \"Cao Bằng\",\r\n            \"Đà Nẵng\",\r\n            \"Đắk Lắk\",\r\n            \"Đắk Nông\",\r\n            \"Điện Biên\",\r\n            \"Đồng Nai\",\r\n            \"Đồng Tháp\",\r\n            \"Gia Lai\",\r\n            \"Hà Giang\",\r\n            \"Hà Nam\",\r\n            \"Hà Nội\",\r\n            \"Hà Tĩnh\",\r\n            \"Hải Dương\",\r\n            \"Hải Phòng\",\r\n            \"Hậu Giang\",\r\n            \"Hòa Bình\",\r\n            \"Hồ Chí Minh\",\r\n            \"Hưng Yên\",\r\n            \"Khánh Hòa\",\r\n            \"Kiên Giang\",\r\n            \"Kon Tum\",\r\n            \"Lai Châu\",\r\n            \"Lâm Đồng\",\r\n            \"Lạng Sơn\",\r\n            \"Lào Cai\",\r\n            \"Long An\"\r\n        )\r\n        var expanded by remember { mutableStateOf(false) }\r\n        var selectedIndex by remember { mutableStateOf(0) }\r\n        var selectedProvince by remember { mutableStateOf(provinceList[selectedIndex]) }\r\n\r\n        Box(\r\n            modifier = Modifier\r\n                .height(60.dp)\r\n                .width(295.dp)\r\n                .clip(RoundedCornerShape(10.dp))\r\n                .background(MaterialTheme.colors.secondaryVariant)\r\n                .clickable {\r\n                    expanded = true\r\n                }, contentAlignment = Alignment.CenterStart\r\n        ) {\r\n            Row(\r\n                verticalAlignment = Alignment.CenterVertically,\r\n                horizontalArrangement = Arrangement.SpaceBetween\r\n            ) {\r\n                Text(\r\n                    text = selectedProvince,\r\n                    fontSize = 20.sp,\r\n                    fontWeight = FontWeight.Bold,\r\n                    modifier = Modifier.padding(horizontal = 16.dp, vertical = 8.dp)\r\n                )\r\n\r\n                Icon(\r\n                    imageVector = Icons.Default.ArrowDropDown,\r\n                    contentDescription = null,\r\n                    tint = Color.Black,\r\n                    modifier = Modifier.size(24.dp)\r\n                )\r\n            }\r\n\r\n        }\r\n\r\n        DropdownMenu(\r\n            expanded = expanded,\r\n            onDismissRequest = { expanded = false },\r\n            modifier = Modifier.fillMaxWidth()\r\n        ) {\r\n            provinceList.forEachIndexed { index, province ->\r\n                DropdownMenuItem(onClick = {\r\n                    selectedProvince = province\r\n                    changeAddress(selectedProvince)\r\n                    selectedIndex = index\r\n                    expanded = false\r\n                }) {\r\n                    Text(\r\n                        text = province,\r\n                        modifier = Modifier.padding(horizontal = 16.dp, vertical = 8.dp)\r\n                    )\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/goingmerry/ui/signInSignUp/FillInfo.kt b/app/src/main/java/com/example/goingmerry/ui/signInSignUp/FillInfo.kt
--- a/app/src/main/java/com/example/goingmerry/ui/signInSignUp/FillInfo.kt	(revision b7d289ff62761a45d5c05f82806f142185413c15)
+++ b/app/src/main/java/com/example/goingmerry/ui/signInSignUp/FillInfo.kt	(date 1682698644029)
@@ -1,10 +1,17 @@
 package com.example.goingmerry.ui.signInSignUp
 
+import android.app.DatePickerDialog
+import android.content.Context
+import android.icu.util.Calendar
+import android.os.Build
 import android.util.Log
+import androidx.annotation.RequiresApi
 import androidx.compose.foundation.background
 import androidx.compose.foundation.clickable
 import androidx.compose.foundation.layout.*
+//import androidx.compose.foundation.layout.BoxScopeInstance.align
 import androidx.compose.foundation.lazy.LazyColumn
+import androidx.compose.foundation.lazy.items
 import androidx.compose.foundation.shape.RoundedCornerShape
 import androidx.compose.foundation.text.KeyboardOptions
 import androidx.compose.material.*
@@ -15,7 +22,9 @@
 import androidx.compose.ui.Alignment
 import androidx.compose.ui.Modifier
 import androidx.compose.ui.draw.clip
+import androidx.compose.ui.focus.onFocusChanged
 import androidx.compose.ui.graphics.Color
+import androidx.compose.ui.platform.LocalContext
 import androidx.compose.ui.text.font.FontWeight
 import androidx.compose.ui.text.input.KeyboardType
 import androidx.compose.ui.text.style.TextAlign
@@ -29,11 +38,14 @@
 import com.example.goingmerry.viewModel.FillInfoViewModel
 import type.AccountInput
 import type.Gender
+import java.text.SimpleDateFormat
+import java.util.*
 
 @Composable
 fun FillScreen(navController: NavController, fillInfoViewModel: FillInfoViewModel, token: String) {
     Column(
-        horizontalAlignment = Alignment.CenterHorizontally, modifier = Modifier.fillMaxSize()
+        horizontalAlignment = Alignment.CenterHorizontally,
+        modifier = Modifier.fillMaxSize()
     ) {
         LogoApp()
 
@@ -69,17 +81,21 @@
     val selectedGender = remember { mutableStateOf("") }
     var job by rememberSaveable { mutableStateOf("") }
     var hobby by rememberSaveable { mutableStateOf("") }
-    if(fillInfoViewModel.idAccountUpdate.value != ""){
-        navController.navigate(Routes.Home.route){
+    val selectedHobbies = remember { mutableStateListOf<String>() }
+    val context = LocalContext.current
+
+    if (fillInfoViewModel.idAccountUpdate.value != "") {
+        navController.navigate(Routes.Home.route) {
             launchSingleTop = true
         }
         fillInfoViewModel.idAccountUpdate.value = ""
     }
+
     LazyColumn(
         modifier = Modifier
             .fillMaxWidth()
             .padding(horizontal = 25.dp),
-        horizontalAlignment = Alignment.CenterHorizontally,
+        horizontalAlignment = Alignment.CenterHorizontally
     ) {
         item {
             Text(
@@ -88,7 +104,7 @@
                 color = Color.Black,
                 fontWeight = FontWeight.Bold,
                 textAlign = TextAlign.Left,
-                modifier = Modifier.width(295.dp)
+                modifier = Modifier.width(295.dp).padding(top = 10.dp)
             )
 
             Spacer(modifier = Modifier.height(5.dp))
@@ -116,21 +132,7 @@
 
             Spacer(modifier = Modifier.height(5.dp))
 
-            TextField(
-                value = birthDate,
-                onValueChange = { birthDate = it },
-                keyboardOptions = KeyboardOptions(
-                    keyboardType = KeyboardType.Number
-                ),
-                singleLine = true,
-                placeholder = { Text("yyyy-MM-dd") },
-                modifier = Modifier
-                    .padding(bottom = 15.dp)
-                    .height(60.dp)
-                    .width(295.dp)
-                    .clip(RoundedCornerShape(10.dp))
-                    .background(MaterialTheme.colors.secondaryVariant),
-            )
+            DatePickerFill(context = context)
 
             Text(
                 text = "Giới tính",
@@ -156,7 +158,7 @@
 
             Spacer(modifier = Modifier.height(5.dp))
 
-            DropBoxFill(changeAddress = {selectedProvince: String -> address = selectedProvince})
+            DropBoxFill(changeAddress = { selectedProvince: String -> address = selectedProvince })
 
             Spacer(modifier = Modifier.height(15.dp))
 
@@ -171,6 +173,8 @@
 
             Spacer(modifier = Modifier.height(5.dp))
 
+//                HobbyList(selectedHobbies = selectedHobbies )
+
             TextField(
                 value = job,
                 onValueChange = { job = it },
@@ -194,32 +198,31 @@
 
             Spacer(modifier = Modifier.height(5.dp))
 
-            TextField(
-                value = hobby,
-                onValueChange = { hobby = it },
-                modifier = Modifier
-                    .padding(bottom = 15.dp)
-                    .height(60.dp)
-                    .width(295.dp)
-                    .clip(RoundedCornerShape(10.dp))
-                    .background(MaterialTheme.colors.secondaryVariant),
-                shape = RoundedCornerShape(10.dp)
-            )
+            HobbyList(selectedHobbies = selectedHobbies)
 
             Spacer(modifier = Modifier.height(15.dp))
 
             Button(
                 onClick = {
-                    Log.e("information", "$nameAccount $birthDate $address ${selectedGender.value} $job $hobby")
+                    Log.e(
+                        "information",
+                        "$nameAccount $birthDate $address ${selectedGender.value} $job $hobby"
+                    )
                     var render = Gender.MALE
-                    if(selectedGender.value == "Nữ"){
+                    if (selectedGender.value == "Nữ") {
                         render = Gender.FEMALE
                     }
-                    if(selectedGender.value == "Khác"){
+                    if (selectedGender.value == "Khác") {
                         render = Gender.OTHER
                     }
-                    val input = AccountInput(Input.fromNullable(nameAccount), Input.fromNullable(birthDate), Input.fromNullable(address),
-                                    Input.fromNullable(render), Input.fromNullable(job), Input.fromNullable(hobby))
+                    val input = AccountInput(
+                        Input.fromNullable(nameAccount),
+                        Input.fromNullable(birthDate),
+                        Input.fromNullable(address),
+                        Input.fromNullable(render),
+                        Input.fromNullable(job),
+                        Input.fromNullable(hobby)
+                    )
                     fillInfoViewModel.updateAccount(token, input)
                 },
                 colors = ButtonDefaults.buttonColors(backgroundColor = MaterialTheme.colors.primary),
@@ -228,6 +231,7 @@
                     .height(60.dp)
                     .width(120.dp)
                     .padding(bottom = 10.dp)
+                    .offset(x = 85.dp)
 
             ) {
                 Text(text = "Hoàn thành")
@@ -236,7 +240,75 @@
             Spacer(modifier = Modifier.height(20.dp))
         }
     }
+}
+
+
+@Composable
+fun DatePickerFill(
+    context: Context,
+//    birthDate: MutableState("")
+) {
+    val year: Int
+    val month: Int
+    val day: Int
+
+    val calendar = java.util.Calendar.getInstance()
+    year = calendar.get(Calendar.YEAR)
+    month = calendar.get(Calendar.MONTH)
+    day = calendar.get(Calendar.DAY_OF_MONTH)
+    calendar.time = Date()
 
+    val date = remember { mutableStateOf("") }
+    val datePickerDialog = DatePickerDialog(
+        context,
+        { _, year: Int, month: Int, dayOfMonth: Int ->
+            date.value = "$dayOfMonth / $month / $year"
+        }, year, month, day
+    )
+
+    Column(
+        horizontalAlignment = Alignment.CenterHorizontally,
+        modifier = Modifier.padding(horizontal = 25.dp)
+    ) {
+        Row(
+            horizontalArrangement = Arrangement.SpaceEvenly,
+            verticalAlignment = Alignment.CenterVertically
+        ) {
+            Box(
+                modifier = Modifier
+                    .padding(bottom = 15.dp)
+                    .height(60.dp)
+                    .width(220.dp)
+                    .clip(RoundedCornerShape(10.dp))
+                    .background(MaterialTheme.colors.secondaryVariant),
+
+            ) {
+                Text(
+                    text = date.value,
+                    color = Color.Black,
+                    fontWeight = FontWeight.Bold,
+                    textAlign = TextAlign.Center,
+                    modifier = Modifier
+                        .offset(x = 15.dp, y = 18.dp)
+                )
+            }
+
+            Spacer(modifier = Modifier.width(10.dp))
+
+            Button(
+                colors = ButtonDefaults
+                    .buttonColors(backgroundColor = MaterialTheme.colors.primaryVariant),
+                modifier = Modifier
+                    .padding(bottom = 15.dp)
+                    .height(60.dp)
+                    .clip(RoundedCornerShape(10.dp)),
+                onClick = {
+                    datePickerDialog.show()
+                }) {
+                Text(text = "Chọn")
+            }
+        }
+    }
 }
 
 @Composable
@@ -360,7 +432,9 @@
         DropdownMenu(
             expanded = expanded,
             onDismissRequest = { expanded = false },
-            modifier = Modifier.fillMaxWidth()
+            modifier = Modifier
+                .width(295.dp)
+                .height(480.dp)
         ) {
             provinceList.forEachIndexed { index, province ->
                 DropdownMenuItem(onClick = {
@@ -371,6 +445,7 @@
                 }) {
                     Text(
                         text = province,
+                        fontWeight = FontWeight.Bold,
                         modifier = Modifier.padding(horizontal = 16.dp, vertical = 8.dp)
                     )
                 }
@@ -379,6 +454,57 @@
     }
 }
 
+@Composable
+fun HobbyList(selectedHobbies: MutableList<String>) {
+    val hobbies = listOf(
+        "Reading",
+        "Playing games",
+        "Watching movies",
+        "Traveling",
+        "Cooking",
+        "Sports",
+        "Photography",
+        "Music",
+        "Drawing",
+        "Writing"
+    )
+
+    Column(
+        horizontalAlignment = Alignment.CenterHorizontally,
+        modifier = Modifier.padding(horizontal = 25.dp)
+    ) {
+        for (hobby in hobbies) {
+            val isChecked = remember { mutableStateOf(false) }
+            Row(
+                modifier = Modifier
+                    .fillMaxWidth()
+                    .padding(horizontal = 16.dp, vertical = 8.dp),
+                verticalAlignment = Alignment.CenterVertically
+            ) {
+                Checkbox(
+                    checked = selectedHobbies.contains(hobby),
+                    onCheckedChange = { isChecked ->
+                        if (isChecked) {
+                            selectedHobbies.add(hobby)
+                        } else {
+                            selectedHobbies.remove(hobby)
+                        }
+                    }
+                )
+
+                Text(
+                    text = hobby,
+                    style = MaterialTheme.typography.body1,
+                    modifier = Modifier.padding(start = 16.dp)
+                )
+            }
+        }
+    }
+}
+
+
+
+
 
 
 
Index: app/src/main/java/com/example/goingmerry/ui/signInSignUp/Verification.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.goingmerry.ui.signInSignUp\r\n\r\nimport androidx.compose.foundation.background\r\nimport androidx.compose.foundation.border\r\nimport androidx.compose.foundation.clickable\r\nimport androidx.compose.foundation.layout.*\r\nimport androidx.compose.foundation.lazy.LazyRow\r\nimport androidx.compose.foundation.shape.CircleShape\r\nimport androidx.compose.foundation.shape.RoundedCornerShape\r\nimport androidx.compose.foundation.text.KeyboardActions\r\nimport androidx.compose.foundation.text.KeyboardOptions\r\nimport androidx.compose.material.*\r\nimport androidx.compose.material.icons.Icons\r\nimport androidx.compose.material.icons.filled.ArrowBack\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.getValue\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.text.TextStyle\r\nimport androidx.compose.ui.text.font.FontWeight\r\nimport androidx.compose.ui.text.input.ImeAction\r\nimport androidx.compose.ui.text.input.KeyboardType\r\nimport androidx.compose.ui.text.style.TextAlign\r\nimport androidx.compose.ui.tooling.preview.Preview\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.compose.ui.unit.sp\r\nimport androidx.navigation.NavController\r\nimport androidx.navigation.compose.currentBackStackEntryAsState\r\nimport com.example.goingmerry.navigate.Routes\r\n\r\n@Composable\r\nfun VerificationScreen(\r\n    navController: NavController,\r\n    titlee: String\r\n) {\r\n    val navBackStackEntry by navController.currentBackStackEntryAsState()\r\n\r\n    val email = navBackStackEntry?.arguments?.getString(\"email\")\r\n    val titlee = \"Nhập mã xác thực vừa được gửi tới email $email của bạn\"\r\n    val numberOfBoxes = 4 // số lượng ô vuông\r\n    val boxSize = 48.dp // kích thước của mỗi ô vuông\r\n    val spacing = 8.dp // khoảng cách giữa các ô vuông\r\n\r\n    Column(\r\n        horizontalAlignment = Alignment.CenterHorizontally,\r\n        modifier = Modifier.fillMaxSize()\r\n    ) {\r\n        LogoApp()\r\n\r\n        Spacer(modifier = Modifier.height(15.dp))\r\n\r\n        Text(\r\n            text = titlee,\r\n            fontSize = 25.sp,\r\n            color = Color.Black,\r\n            fontWeight = FontWeight.Bold,\r\n            textAlign = TextAlign.Center,\r\n            modifier = Modifier.width(300.dp)\r\n        )\r\n\r\n        Spacer(modifier = Modifier.height(25.dp))\r\n\r\n        Row(\r\n            horizontalArrangement = Arrangement.Center,\r\n            modifier = Modifier.fillMaxWidth()\r\n        ) {\r\n            for (i in 1..4) {\r\n                TextField(\r\n                    value = \"\",\r\n                    onValueChange = {},\r\n                    modifier = Modifier\r\n                        .padding(horizontal = 10.dp)\r\n                        .size(60.dp)\r\n                        .background(Color.White)\r\n                        .border(1.dp, Color.Gray, RoundedCornerShape(10.dp)),\r\n                    maxLines = 1,\r\n                    keyboardOptions = KeyboardOptions(\r\n                        keyboardType = KeyboardType.Number,\r\n                        imeAction = ImeAction.Next\r\n                    ),\r\n                    keyboardActions = KeyboardActions(\r\n                        onNext = { /* Move focus to the next text field */ }\r\n                    ),\r\n                    textStyle = TextStyle(textAlign = TextAlign.Center)\r\n                )\r\n            }\r\n        }\r\n\r\n        Spacer(modifier = Modifier.height(30.dp))\r\n\r\n        Button(\r\n            onClick = {\r\n//                navController.navigate(Routes.Home.route){\r\n//                    launchSingleTop = true\r\n//                }\r\n            },\r\n            colors = ButtonDefaults.buttonColors(backgroundColor = MaterialTheme.colors.primary),\r\n            shape = RoundedCornerShape(10.dp),\r\n            modifier = Modifier\r\n                .height(60.dp)\r\n                .width(160.dp)\r\n                .padding(bottom = 15.dp)\r\n\r\n        ) {\r\n            Text(text = \"Xác thực\")\r\n        }\r\n\r\n        Row(\r\n            horizontalArrangement = Arrangement.Center,\r\n            modifier = Modifier.padding(bottom = 15.dp)\r\n        ) {\r\n            Text(text = \"Chưa nhận được email?\")\r\n\r\n            Spacer(modifier = Modifier.width(5.dp))\r\n\r\n            Text(\r\n                text = \"Gửi lại\",\r\n                color = MaterialTheme.colors.error,\r\n                fontWeight = FontWeight.Bold,\r\n                modifier = Modifier\r\n                    .clickable(onClick = {\r\n\r\n                    })\r\n            )\r\n        }\r\n\r\n        Row(\r\n            horizontalArrangement = Arrangement.Center,\r\n            modifier = Modifier\r\n                .clickable(onClick = {\r\n                    navController.navigate(Routes.SignIn.route) {\r\n                        launchSingleTop = true\r\n                    }\r\n                })\r\n        ) {\r\n            Icon(\r\n                imageVector = Icons.Default.ArrowBack,\r\n                contentDescription = null,\r\n                tint = Color.Blue,\r\n                modifier = Modifier.size(20.dp)\r\n            )\r\n\r\n            Spacer(modifier = Modifier.width(15.dp))\r\n\r\n            Text(\r\n                text = \"Quay trở lại đăng nhập\",\r\n                color = Color.Blue\r\n            )\r\n        }\r\n\r\n    }\r\n}\r\n\r\n//@Composable\r\n//@Preview\r\n//fun PreviewVerification() {\r\n//    VerificationScreen(\r\n//        titlee = \"Nhập mã xác thực vừa được gửi tới email của bạn\"\r\n//    )\r\n//}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/goingmerry/ui/signInSignUp/Verification.kt b/app/src/main/java/com/example/goingmerry/ui/signInSignUp/Verification.kt
--- a/app/src/main/java/com/example/goingmerry/ui/signInSignUp/Verification.kt	(revision b7d289ff62761a45d5c05f82806f142185413c15)
+++ b/app/src/main/java/com/example/goingmerry/ui/signInSignUp/Verification.kt	(date 1682698644038)
@@ -59,41 +59,15 @@
             modifier = Modifier.width(300.dp)
         )
 
-        Spacer(modifier = Modifier.height(25.dp))
 
-        Row(
-            horizontalArrangement = Arrangement.Center,
-            modifier = Modifier.fillMaxWidth()
-        ) {
-            for (i in 1..4) {
-                TextField(
-                    value = "",
-                    onValueChange = {},
-                    modifier = Modifier
-                        .padding(horizontal = 10.dp)
-                        .size(60.dp)
-                        .background(Color.White)
-                        .border(1.dp, Color.Gray, RoundedCornerShape(10.dp)),
-                    maxLines = 1,
-                    keyboardOptions = KeyboardOptions(
-                        keyboardType = KeyboardType.Number,
-                        imeAction = ImeAction.Next
-                    ),
-                    keyboardActions = KeyboardActions(
-                        onNext = { /* Move focus to the next text field */ }
-                    ),
-                    textStyle = TextStyle(textAlign = TextAlign.Center)
-                )
-            }
-        }
 
         Spacer(modifier = Modifier.height(30.dp))
 
         Button(
             onClick = {
-//                navController.navigate(Routes.Home.route){
-//                    launchSingleTop = true
-//                }
+                navController.navigate(Routes.Home.route){
+                    launchSingleTop = true
+                }
             },
             colors = ButtonDefaults.buttonColors(backgroundColor = MaterialTheme.colors.primary),
             shape = RoundedCornerShape(10.dp),
@@ -127,12 +101,12 @@
 
         Row(
             horizontalArrangement = Arrangement.Center,
-            modifier = Modifier
-                .clickable(onClick = {
-                    navController.navigate(Routes.SignIn.route) {
-                        launchSingleTop = true
-                    }
-                })
+//            modifier = Modifier
+//                .clickable(onClick = {
+//                    navController.navigate(Routes.SignIn.route) {
+//                        launchSingleTop = true
+//                    }
+//                })
         ) {
             Icon(
                 imageVector = Icons.Default.ArrowBack,
Index: app/src/main/java/com/example/goingmerry/ui/signInSignUp/SignUp.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.goingmerry.ui.signInSignUp\r\n\r\nimport androidx.compose.foundation.clickable\r\nimport androidx.compose.foundation.layout.*\r\nimport androidx.compose.foundation.shape.RoundedCornerShape\r\nimport androidx.compose.foundation.text.KeyboardOptions\r\nimport androidx.compose.material.*\r\nimport androidx.compose.material.icons.Icons\r\nimport androidx.compose.material.icons.filled.Visibility\r\nimport androidx.compose.material.icons.filled.VisibilityOff\r\nimport androidx.compose.runtime.*\r\nimport androidx.compose.runtime.saveable.rememberSaveable\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.focus.focusModifier\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.res.stringResource\r\nimport androidx.compose.ui.text.font.FontWeight\r\nimport androidx.compose.ui.text.input.KeyboardType\r\nimport androidx.compose.ui.text.input.PasswordVisualTransformation\r\nimport androidx.compose.ui.text.input.VisualTransformation\r\nimport androidx.compose.ui.text.style.TextAlign\r\nimport androidx.compose.ui.tooling.preview.Preview\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.compose.ui.unit.sp\r\nimport androidx.navigation.NavController\r\nimport androidx.navigation.compose.rememberNavController\r\nimport com.example.goingmerry.R\r\nimport com.example.goingmerry.navigate.Routes\r\nimport com.example.goingmerry.viewModel.LoginViewModel\r\nimport com.example.goingmerry.viewModel.SignUpViewModel\r\n\r\n@Composable\r\nfun ScreenSignUp(navController: NavController, signUpViewModel: SignUpViewModel) {\r\n    var invalidPasswordNotification by rememberSaveable { mutableStateOf(false) }\r\n    var email by rememberSaveable { mutableStateOf(\"\") }\r\n    var password by rememberSaveable { mutableStateOf(\"\") }\r\n    var rePassword by rememberSaveable { mutableStateOf(\"\") }\r\n\r\n    var buttonOnClick by rememberSaveable {\r\n        mutableStateOf(false)\r\n    }\r\n    Column(\r\n        modifier = Modifier.fillMaxSize(),\r\n        horizontalAlignment = Alignment.CenterHorizontally\r\n    ) {\r\n        LogoApp()\r\n\r\n        Spacer(modifier = Modifier.height(25.dp))\r\n\r\n        Text(\r\n            text = \"Tạo tài khoản của riêng bạn!\",\r\n            fontSize = 30.sp,\r\n            fontWeight = FontWeight.Bold,\r\n            color = Color.Black,\r\n            textAlign = TextAlign.Center,\r\n            modifier = Modifier\r\n                .padding(bottom = 20.dp)\r\n                .width(300.dp)\r\n        )\r\n\r\n        Column(\r\n            modifier = Modifier.fillMaxHeight(),\r\n            verticalArrangement = Arrangement.Center\r\n        ) {\r\n            Text(\r\n                text = \"Thông tin tài khoản\",\r\n                fontWeight = FontWeight.Bold,\r\n                modifier = Modifier.padding(bottom = 10.dp)\r\n            )\r\n\r\n\r\n            InputTextField(email, onValueChange = { email = it })\r\n\r\n            InputPasswordField(password, onValueChange = { password = it })\r\n\r\n            InputRePasswordField(rePassword, onValueChange = { rePassword = it })\r\n\r\n            if (invalidPasswordNotification) {\r\n                Text(\r\n                    text = \"Password nhập lại không đúng\",\r\n                    modifier = Modifier.padding(bottom = 10.dp),\r\n                    color = MaterialTheme.colors.error\r\n                )\r\n            }\r\n\r\n            Row(\r\n                modifier = Modifier.padding(bottom = 10.dp)\r\n            ) {\r\n                Text(\r\n                    text = \"Đã có tài khoản?\",\r\n                    color = Color.Black\r\n                )\r\n\r\n                Spacer(modifier = Modifier.width(5.dp))\r\n\r\n                Text(\r\n                    text = \"Đăng nhập\",\r\n                    color = MaterialTheme.colors.error,\r\n                    modifier = Modifier\r\n                        .clickable(onClick = {\r\n                            navController.navigate(Routes.SignIn.route){\r\n                                launchSingleTop = true\r\n                            }\r\n                        })\r\n                )\r\n            }\r\n\r\n            Button(\r\n                onClick = {\r\n                    if (password != rePassword) {\r\n                        invalidPasswordNotification = true;\r\n                    } else {\r\n                        invalidPasswordNotification = false;\r\n                        signUpViewModel.signUp(email = email, password = password)\r\n                        navController.navigate(\r\n                            route = Routes.Verification.route + \"/${email}\",\r\n                            builder = {\r\n                                launchSingleTop = true\r\n                            }\r\n                        ) }\r\n                },\r\n                colors = ButtonDefaults\r\n                    .buttonColors(backgroundColor = MaterialTheme.colors.primaryVariant),\r\n                modifier = Modifier\r\n                    .height(60.dp)\r\n                    .width(295.dp)\r\n\r\n            ) {\r\n                Text(text = \"Đăng ký\")\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Preview\r\n@Composable\r\nfun PreviewScreenSignUp() {\r\n    val navController = rememberNavController()\r\n    val signUpViewModel: SignUpViewModel = SignUpViewModel()\r\n    ScreenSignUp(navController, signUpViewModel)\r\n}\r\n\r\n@Composable\r\nfun InputUserNameField(text: String, onValueChange: (String) -> Unit) {\r\n    TextField(\r\n        modifier = Modifier\r\n            .padding(bottom = 10.dp)\r\n            .height(60.dp)\r\n            .width(295.dp),\r\n        value = text,\r\n        onValueChange = onValueChange,\r\n        label = {\r\n            Text(\r\n                text = stringResource(id = R.string.label_userName),\r\n                color = MaterialTheme.colors.onSecondary\r\n            )\r\n        },\r\n        colors = TextFieldDefaults.textFieldColors(\r\n            backgroundColor = MaterialTheme.colors.secondaryVariant\r\n        ),\r\n        shape = RoundedCornerShape(10.dp),\r\n        maxLines = 1\r\n    )\r\n}\r\n\r\n/*\r\n@Composable\r\n@Preview\r\nfun ReviewInputUserNameField() {\r\n    var text by rememberSaveable { mutableStateOf(\"\") }\r\n    InputUserNameField(text, onValueChange = { text = it })\r\n}\r\n*/\r\n\r\n\r\n@Composable\r\nfun InputRePasswordField(rePassword: String, onValueChange: (String) -> Unit) {\r\n    var passwordVisible by rememberSaveable { mutableStateOf(false) }\r\n\r\n    TextField(\r\n        modifier = Modifier\r\n            .padding(bottom = 10.dp)\r\n            .height(60.dp)\r\n            .width(295.dp),\r\n        value = rePassword,\r\n        onValueChange = onValueChange,\r\n        label = {\r\n            Text(\r\n                text = stringResource(id = R.string.label_rePassword),\r\n                color = MaterialTheme.colors.onSecondary\r\n            )\r\n        },\r\n        colors = TextFieldDefaults.textFieldColors(\r\n            backgroundColor = MaterialTheme.colors.secondaryVariant\r\n        ),\r\n        shape = RoundedCornerShape(10.dp),\r\n        maxLines = 1,\r\n        visualTransformation = if (passwordVisible) VisualTransformation.None else PasswordVisualTransformation(),\r\n        keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Password),\r\n        trailingIcon = {\r\n            val image = if (passwordVisible)\r\n                Icons.Filled.Visibility\r\n            else Icons.Filled.VisibilityOff\r\n\r\n            val description = if (passwordVisible) \"Hide password\" else \"Show password\"\r\n\r\n            IconButton(onClick = { passwordVisible = !passwordVisible }) {\r\n                Icon(imageVector = image, description)\r\n            }\r\n        }\r\n    )\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/goingmerry/ui/signInSignUp/SignUp.kt b/app/src/main/java/com/example/goingmerry/ui/signInSignUp/SignUp.kt
--- a/app/src/main/java/com/example/goingmerry/ui/signInSignUp/SignUp.kt	(revision b7d289ff62761a45d5c05f82806f142185413c15)
+++ b/app/src/main/java/com/example/goingmerry/ui/signInSignUp/SignUp.kt	(date 1682698644048)
@@ -46,26 +46,26 @@
     ) {
         LogoApp()
 
-        Spacer(modifier = Modifier.height(25.dp))
-
-        Text(
-            text = "Tạo tài khoản của riêng bạn!",
-            fontSize = 30.sp,
-            fontWeight = FontWeight.Bold,
-            color = Color.Black,
-            textAlign = TextAlign.Center,
-            modifier = Modifier
-                .padding(bottom = 20.dp)
-                .width(300.dp)
-        )
+        Column(
+            modifier = Modifier
+                .fillMaxWidth()
+                .padding(horizontal = 25.dp),
+            horizontalAlignment = Alignment.CenterHorizontally,
+        ) {
+            Text(
+                text = "Tạo tài khoản của riêng bạn!",
+                fontSize = 30.sp,
+                fontWeight = FontWeight.Bold,
+                color = Color.Black,
+                textAlign = TextAlign.Center,
+                modifier = Modifier
+                    .padding(bottom = 20.dp)
+            )
 
-        Column(
-            modifier = Modifier.fillMaxHeight(),
-            verticalArrangement = Arrangement.Center
-        ) {
             Text(
                 text = "Thông tin tài khoản",
                 fontWeight = FontWeight.Bold,
+                textAlign = TextAlign.Left,
                 modifier = Modifier.padding(bottom = 10.dp)
             )
 
@@ -89,6 +89,7 @@
             ) {
                 Text(
                     text = "Đã có tài khoản?",
+                    textAlign = TextAlign.Left,
                     color = Color.Black
                 )
 
@@ -114,7 +115,7 @@
                         invalidPasswordNotification = false;
                         signUpViewModel.signUp(email = email, password = password)
                         navController.navigate(
-                            route = Routes.Verification.route + "/${email}",
+                            route = Routes.Verification.route + "?email=${email}",
                             builder = {
                                 launchSingleTop = true
                             }
Index: .idea/.gitignore
===================================================================
diff --git a/.idea/.gitignore b/.idea/.gitignore
deleted file mode 100644
--- a/.idea/.gitignore	(revision b7d289ff62761a45d5c05f82806f142185413c15)
+++ /dev/null	(revision b7d289ff62761a45d5c05f82806f142185413c15)
@@ -1,3 +0,0 @@
-# Default ignored files
-/shelf/
-/workspace.xml
Index: .idea/deploymentTargetDropDown.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/deploymentTargetDropDown.xml b/.idea/deploymentTargetDropDown.xml
deleted file mode 100644
--- a/.idea/deploymentTargetDropDown.xml	(revision b7d289ff62761a45d5c05f82806f142185413c15)
+++ /dev/null	(revision b7d289ff62761a45d5c05f82806f142185413c15)
@@ -1,17 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="deploymentTargetDropDown">
-    <targetSelectedWithDropDown>
-      <Target>
-        <type value="QUICK_BOOT_TARGET" />
-        <deviceKey>
-          <Key>
-            <type value="VIRTUAL_DEVICE_PATH" />
-            <value value="D:\Android_Virtual\.android\avd\Pixel_5_API_31_2.avd" />
-          </Key>
-        </deviceKey>
-      </Target>
-    </targetSelectedWithDropDown>
-    <timeTargetWasSelectedWithDropDown value="2023-04-25T16:35:26.727997700Z" />
-  </component>
-</project>
\ No newline at end of file
Index: app/src/androidTest/java/com/example/goingmerry/ExampleInstrumentedTest.kt
===================================================================
diff --git a/app/src/androidTest/java/com/example/goingmerry/ExampleInstrumentedTest.kt b/app/src/androidTest/java/com/example/goingmerry/ExampleInstrumentedTest.kt
deleted file mode 100644
--- a/app/src/androidTest/java/com/example/goingmerry/ExampleInstrumentedTest.kt	(revision b7d289ff62761a45d5c05f82806f142185413c15)
+++ /dev/null	(revision b7d289ff62761a45d5c05f82806f142185413c15)
@@ -1,24 +0,0 @@
-package com.example.goingmerry
-
-import androidx.test.platform.app.InstrumentationRegistry
-import androidx.test.ext.junit.runners.AndroidJUnit4
-
-import org.junit.Test
-import org.junit.runner.RunWith
-
-import org.junit.Assert.*
-
-/**
- * Instrumented test, which will execute on an Android device.
- *
- * See [testing documentation](http://d.android.com/tools/testing).
- */
-@RunWith(AndroidJUnit4::class)
-class ExampleInstrumentedTest {
-    @Test
-    fun useAppContext() {
-        // Context of the app under test.
-        val appContext = InstrumentationRegistry.getInstrumentation().targetContext
-        assertEquals("com.example.goingmerry", appContext.packageName)
-    }
-}
\ No newline at end of file
Index: app/src/test/java/com/example/goingmerry/ExampleUnitTest.kt
===================================================================
diff --git a/app/src/test/java/com/example/goingmerry/ExampleUnitTest.kt b/app/src/test/java/com/example/goingmerry/ExampleUnitTest.kt
deleted file mode 100644
--- a/app/src/test/java/com/example/goingmerry/ExampleUnitTest.kt	(revision b7d289ff62761a45d5c05f82806f142185413c15)
+++ /dev/null	(revision b7d289ff62761a45d5c05f82806f142185413c15)
@@ -1,17 +0,0 @@
-package com.example.goingmerry
-
-import org.junit.Test
-
-import org.junit.Assert.*
-
-/**
- * Example local unit test, which will execute on the development machine (host).
- *
- * See [testing documentation](http://d.android.com/tools/testing).
- */
-class ExampleUnitTest {
-    @Test
-    fun addition_isCorrect() {
-        assertEquals(4, 2 + 2)
-    }
-}
\ No newline at end of file
Index: app/src/main/java/com/example/goingmerry/URL.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.goingmerry\r\n\r\nobject URL {\r\n    const val urlServer = \"http://192.168.57.104:8080\"\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/goingmerry/URL.kt b/app/src/main/java/com/example/goingmerry/URL.kt
--- a/app/src/main/java/com/example/goingmerry/URL.kt	(revision b7d289ff62761a45d5c05f82806f142185413c15)
+++ b/app/src/main/java/com/example/goingmerry/URL.kt	(date 1682698644105)
@@ -1,5 +1,5 @@
 package com.example.goingmerry
 
 object URL {
-    const val urlServer = "http://192.168.57.104:8080"
+    const val urlServer = "http://10.0.2.2:8080"
 }
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"DesignSurface\">\r\n    <option name=\"filePathToZoomLevelMap\">\r\n      <map>\r\n        <entry key=\"..\\:/Documents/appAndroid/Going-Merry/app/src/main/res/drawable/ic_bvisibility_off.xml\" value=\"0.121\" />\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_11\" project-jdk-name=\"1.8\" project-jdk-type=\"JavaSDK\">\r\n    <output url=\"file://$PROJECT_DIR$/build/classes\" />\r\n  </component>\r\n  <component name=\"ProjectType\">\r\n    <option name=\"id\" value=\"Android\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision b7d289ff62761a45d5c05f82806f142185413c15)
+++ b/.idea/misc.xml	(date 1682698644116)
@@ -1,12 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
-  <component name="DesignSurface">
-    <option name="filePathToZoomLevelMap">
-      <map>
-        <entry key="..\:/Documents/appAndroid/Going-Merry/app/src/main/res/drawable/ic_bvisibility_off.xml" value="0.121" />
-      </map>
-    </option>
-  </component>
+  <component name="ExternalStorageConfigurationManager" enabled="true" />
   <component name="ProjectRootManager" version="2" languageLevel="JDK_11" project-jdk-name="1.8" project-jdk-type="JavaSDK">
     <output url="file://$PROJECT_DIR$/build/classes" />
   </component>
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"VcsDirectoryMappings\">\r\n    <mapping directory=\"$PROJECT_DIR$\" vcs=\"Git\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
--- a/.idea/vcs.xml	(revision b7d289ff62761a45d5c05f82806f142185413c15)
+++ b/.idea/vcs.xml	(date 1682698644126)
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
   <component name="VcsDirectoryMappings">
-    <mapping directory="$PROJECT_DIR$" vcs="Git" />
+    <mapping directory="" vcs="Git" />
   </component>
 </project>
\ No newline at end of file
Index: app/src/main/java/com/example/goingmerry/viewModel/ChatBoxViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.goingmerry.viewModel\r\n\r\nimport AccountQuery\r\nimport BeforeMessageQuery\r\nimport android.os.Build\r\nimport android.util.Log\r\nimport androidx.annotation.RequiresApi\r\nimport androidx.compose.runtime.mutableStateOf\r\nimport androidx.lifecycle.ViewModel\r\nimport androidx.lifecycle.viewModelScope\r\nimport com.apollographql.apollo.ApolloCall\r\nimport com.apollographql.apollo.ApolloClient\r\nimport com.apollographql.apollo.api.Response\r\nimport com.apollographql.apollo.exception.ApolloException\r\nimport com.example.goingmerry.URL\r\nimport com.google.gson.Gson\r\nimport io.ktor.client.*\r\nimport io.ktor.client.engine.cio.*\r\nimport io.ktor.client.plugins.websocket.*\r\nimport io.ktor.utils.io.core.*\r\nimport io.netty.buffer.ByteBufAllocator\r\nimport io.rsocket.kotlin.RSocket\r\nimport io.rsocket.kotlin.core.WellKnownMimeType\r\nimport io.rsocket.kotlin.emitOrClose\r\nimport io.rsocket.kotlin.ktor.client.RSocketSupport\r\nimport io.rsocket.kotlin.ktor.client.rSocket\r\nimport io.rsocket.kotlin.metadata.RoutingMetadata\r\nimport io.rsocket.kotlin.metadata.compositeMetadata\r\nimport io.rsocket.kotlin.metadata.security.BearerAuthMetadata\r\nimport io.rsocket.kotlin.payload.*\r\nimport kotlinx.coroutines.Dispatchers\r\nimport kotlinx.coroutines.Job\r\nimport kotlinx.coroutines.flow.*\r\nimport kotlinx.coroutines.launch\r\nimport okhttp3.OkHttpClient\r\nimport java.time.Instant\r\n\r\n\r\nclass ChatBoxViewModel: ViewModel() {\r\n    var stateSockets = mutableStateOf(\"OFF\")\r\n    var conversationId = mutableStateOf(0L)\r\n\r\n    private var _progressBar = MutableStateFlow(false)\r\n    var progressBar = _progressBar.asStateFlow()\r\n\r\n    private val _listReceiverMessage = MutableStateFlow(listOf<DirectMessage>())\r\n    val listReceiverMessage = _listReceiverMessage.asStateFlow()\r\n\r\n    private val _beforeMessages = MutableStateFlow(listOf<BeforeMessageQuery.BeforeMessage>())\r\n    val beforeMessages = _beforeMessages.asStateFlow()\r\n\r\n    var contentSendMessage = mutableStateOf(\"\")\r\n    var flag = mutableStateOf(false)\r\n    var jobReceiver: Job? = null\r\n    var sendJob: Job? = null\r\n\r\n    @RequiresApi(Build.VERSION_CODES.O)\r\n    fun receiverMessages(loginViewModel: LoginViewModel, homeViewModel: HomeViewModel){\r\n        stateSockets.value = \"ON\"\r\n        val bearerAuthMetadata = BearerAuthMetadata(loginViewModel.token.value)\r\n        val routeMetadata = RoutingMetadata(\"api.v1.messages.stream\")\r\n        jobReceiver?.cancel()\r\n        jobReceiver = viewModelScope.launch (Dispatchers.IO){\r\n            val gson = Gson()\r\n            val client = HttpClient (CIO){ //create and configure ktor client\r\n                install(WebSockets)\r\n                install(RSocketSupport){\r\n                    connector {\r\n                        connectionConfig {\r\n                            payloadMimeType = PayloadMimeType(\r\n                                data = WellKnownMimeType.ApplicationJson,\r\n                                metadata = WellKnownMimeType.MessageRSocketCompositeMetadata\r\n                            )\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            val rSocket: RSocket = client.rSocket(path = \"/rsocket\", host = \"192.168.57.104\", port = 8080)\r\n\r\n            val stream: Flow<Payload> = rSocket.requestStream(\r\n                buildPayload {\r\n                    compositeMetadata {\r\n                        add(bearerAuthMetadata)\r\n                        add(routeMetadata)\r\n                    }\r\n                    data(Instant.now().epochSecond.toString())\r\n                }\r\n            )\r\n            stream.collect { payload: Payload ->\r\n                val json = payload.data.readText()\r\n                val receiverMessage = gson.fromJson(json, ReceiverMessage::class.java)\r\n                for(item in homeViewModel.conversations.value){\r\n                    if(item.id.toLong() == receiverMessage.conversationId){\r\n                        var name = \"\"\r\n                        for(member in item.members){\r\n                            if(member.id.toLong() == receiverMessage.senderId){\r\n                                name = member.name\r\n                            }\r\n                        }\r\n                        val directMessage = DirectMessage(\r\n                            receiverMessage.conversationId.toString(),\r\n                            receiverMessage.senderId.toString(),\r\n                            receiverMessage.content,\r\n                            name,\r\n                            Instant.parse(receiverMessage.sentAt).epochSecond.toInt(),\r\n                        )\r\n                        _listReceiverMessage.emit(listReceiverMessage.value + directMessage)\r\n                    }\r\n\r\n                }/*\r\n                listReceiverMessage.value.plus(receiverMessage)\r\n                val format = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\")\r\n                val createdAt = LocalDateTime.ofInstant(receiverMessage.createdAt, ZoneId.systemDefault()).format(format)\r\n                val updatedAt = LocalDateTime.ofInstant(receiverMessage.updatedAt, ZoneId.systemDefault()).format(format)\r\n                val deletedAt = LocalDateTime.ofInstant(receiverMessage.deletedAt, ZoneId.systemDefault()).format(format)\r\n                println(\"$createdAt $updatedAt $deletedAt\")*/\r\n            }\r\n        }\r\n    }\r\n    fun sendMessages(loginViewModel: LoginViewModel){\r\n        Log.e(\"send\", \"sendMessage\")\r\n        stateSockets.value = \"ON\"\r\n        val bearerAuthMetadata = BearerAuthMetadata(loginViewModel.token.value)\r\n        val routeMetadata = RoutingMetadata(\"api.v1.messages.stream\")\r\n        sendJob?.cancel()\r\n        sendJob = viewModelScope.launch (Dispatchers.IO) {\r\n            val gson = Gson()\r\n            val client = HttpClient (CIO){ //create and configure ktor client\r\n                install(WebSockets)\r\n                install(RSocketSupport){\r\n                    connector {\r\n                        connectionConfig {\r\n                            payloadMimeType = PayloadMimeType(\r\n                                data = WellKnownMimeType.ApplicationJson,\r\n                                metadata = WellKnownMimeType.MessageRSocketCompositeMetadata\r\n                            )\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            val rSocket: RSocket = client.rSocket(path = \"/rsocket\", host = \"192.168.57.104\", port = 8080)\r\n\r\n            rSocket.requestChannel(\r\n                buildPayload {\r\n                    compositeMetadata {\r\n                        add(bearerAuthMetadata)\r\n                        add(routeMetadata)\r\n                    }\r\n                    data(ByteReadPacket.Empty)\r\n                },\r\n                flow{\r\n                    while (true){\r\n                        if(flag.value){\r\n                            val sendMessage = SendMessage(contentSendMessage.value, conversationId.value, MessageType.TEXT)\r\n                            //listMessage.value.plus(sendMessage)\r\n                            val gsonSendMessage = gson.toJson(sendMessage)\r\n                            emitOrClose(\r\n                                buildPayload {\r\n                                    compositeMetadata {\r\n                                        add(bearerAuthMetadata)\r\n                                        add(routeMetadata)\r\n                                    }\r\n                                    data(gsonSendMessage)\r\n                                }\r\n                            )\r\n                            flag.value = false\r\n                        }\r\n                    }\r\n\r\n                }\r\n            ).collect()\r\n        }\r\n    }\r\n\r\n    fun getBeforeMessage(token: String, conversationId: String, messageId: String){\r\n        viewModelScope.launch(Dispatchers.IO){\r\n            try {\r\n                val okHttp = OkHttpClient.Builder()\r\n                    .addInterceptor{chain ->\r\n                        val original = chain.request()\r\n                        val builder = original.newBuilder().method(\"POST\", original.body)\r\n                        builder.addHeader(\"Authorization\", \"Bearer $token\")\r\n                        builder.addHeader(\"Content-Type\",\"application/json\")\r\n                        chain.proceed(builder.build())\r\n                    }.build()\r\n                val apolloClient = ApolloClient.builder()\r\n                    .serverUrl(\"${URL.urlServer}/graphql\")\r\n                    .okHttpClient(okHttp)\r\n                    .build()\r\n                val users = apolloClient.query(BeforeMessageQuery(conversationId, messageId))\r\n                users.enqueue(object: ApolloCall.Callback<BeforeMessageQuery.Data>(){\r\n                    override fun onResponse(response: Response<BeforeMessageQuery.Data>) {\r\n                        _beforeMessages.tryEmit(response.data!!.beforeMessage.orEmpty())\r\n                        if(response.data!!.beforeMessage!!.isEmpty()){\r\n                            setProgressBar(false)\r\n                        }\r\n                        Log.e(\"response\", beforeMessages.value.toString())\r\n                    }\r\n\r\n                    override fun onFailure(e: ApolloException) {\r\n                        Log.e(\"Todo\", e.toString())\r\n                    }\r\n                })\r\n            }catch (e: Exception){\r\n                Log.e(\"error\", e.toString())\r\n            }\r\n        }\r\n    }\r\n\r\n    fun setProgressBar(boolean: Boolean){\r\n        _progressBar.tryEmit(boolean)\r\n    }\r\n    fun resetBeforeMessage(){\r\n        _beforeMessages.tryEmit(listOf())\r\n    }\r\n    fun resetListReceiverMessage(){\r\n        _listReceiverMessage.tryEmit(listOf())\r\n    }\r\n}\r\ndata class ReceiverMessage(\r\n    val id: Long?,\r\n    val content: String,\r\n    val type: MessageType,\r\n    val senderId: Long,\r\n    val conversationId: Long,\r\n    val sentAt: String,\r\n)\r\ndata class DirectMessage(\r\n    val idConversation: String,\r\n    val idSender: String,\r\n    val messageContent: String,\r\n    val messageName: String,\r\n    val sendAt: Int\r\n)\r\n\r\nenum class MessageType{\r\n    TEXT,\r\n    AUDIO,\r\n    VIDEO,\r\n    IMAGE\r\n}\r\n\r\ndata class SendMessage(\r\n    val content: String,\r\n    val conversationId: Long,\r\n    val type: MessageType,\r\n)
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/goingmerry/viewModel/ChatBoxViewModel.kt b/app/src/main/java/com/example/goingmerry/viewModel/ChatBoxViewModel.kt
--- a/app/src/main/java/com/example/goingmerry/viewModel/ChatBoxViewModel.kt	(revision b7d289ff62761a45d5c05f82806f142185413c15)
+++ b/app/src/main/java/com/example/goingmerry/viewModel/ChatBoxViewModel.kt	(date 1682698644062)
@@ -75,7 +75,7 @@
                     }
                 }
             }
-            val rSocket: RSocket = client.rSocket(path = "/rsocket", host = "192.168.57.104", port = 8080)
+            val rSocket: RSocket = client.rSocket(path = "/rsocket", host = "10.0.2.2", port = 8080)
 
             val stream: Flow<Payload> = rSocket.requestStream(
                 buildPayload {
@@ -138,7 +138,7 @@
                     }
                 }
             }
-            val rSocket: RSocket = client.rSocket(path = "/rsocket", host = "192.168.57.104", port = 8080)
+            val rSocket: RSocket = client.rSocket(path = "/rsocket", host = "10.0.2.2", port = 8080)
 
             rSocket.requestChannel(
                 buildPayload {
